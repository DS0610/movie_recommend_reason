# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1Xciyc8hlFoOIMDkzA1uj6DuwDQzk6b
"""

from flask import Flask, request, jsonify
import re
from konlpy.tag import Okt
import pickle
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import load_model
import pymysql

# Flask 앱 생성
app = Flask(__name__)

# 1. 형태소 분석기 정의
okt = Okt()

# 2. 불용어 정의
stopwords = ['의','가','이','은','들','는','좀','잘','걍','과','도','를','으로','자','에','와','한','하다']

# 3. 토크나이저 불러오기
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

# 4. 최대 문장 길이 설정
max_len = 30

# 5. 모델 불러오기
loaded_model = load_model('sentiment_model.h5')

# 6. 감성 분석 함수
def sentiment_predict(new_sentence):
    new_sentence = re.sub(r'[^ㄱ-ㅎㅏ-ㅣ가-힣 ]', '', new_sentence)
    new_sentence = okt.morphs(new_sentence, stem=True)
    new_sentence = [word for word in new_sentence if word not in stopwords]
    encoded = tokenizer.texts_to_sequences([new_sentence])
    pad_new = pad_sequences(encoded, maxlen=max_len)
    score = float(loaded_model.predict(pad_new)[0])
    label = 1 if score > 0.5 else 0
    return label, score

# 7. DB 저장 함수
def save_review_to_db(review, label, score):
    conn = pymysql.connect(
        host='localhost',
        user='root',
        password='1234',  # ← 본인 DB 정보로 변경
        db='sentiment_analysis',
        charset='utf8mb4'
    )
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS review_results (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    review TEXT NOT NULL,
                    label INT NOT NULL,
                    score FLOAT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            cursor.execute("INSERT INTO review_results (review, label, score) VALUES (%s, %s, %s)",
                           (review, label, score))
        conn.commit()
    finally:
        conn.close()

# 8. 예측 API 엔드포인트
@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    review = data.get('review', '')
    if not review:
        return jsonify({'error': '리뷰 데이터가 제공되지 않았습니다.'}), 400

    label, score = sentiment_predict(review)
    save_review_to_db(review, label, score)

    return jsonify({
        'label': label,
        'score': round(score, 4)
    })

# 9. Flask 서버 실행
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

